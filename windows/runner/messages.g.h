// Copyright 2024 EchoTech. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace flutter_saveto {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class SaveToHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class MediaType {
  audio = 0,
  file = 1,
  video = 2,
  image = 3
};

// Generated class from Pigeon that represents data sent in messages.
class SaveItemMessage {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit SaveItemMessage(
    const MediaType& media_type,
    const std::string& file_path,
    const std::string& save_directory_path);

  // Constructs an object setting all fields.
  explicit SaveItemMessage(
    const MediaType& media_type,
    const std::string* name,
    const std::string& file_path,
    const std::string& save_directory_path,
    const std::string* save_file_path,
    const std::string* description,
    const std::string* mime_type);

  const MediaType& media_type() const;
  void set_media_type(const MediaType& value_arg);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);

  const std::string& file_path() const;
  void set_file_path(std::string_view value_arg);

  const std::string& save_directory_path() const;
  void set_save_directory_path(std::string_view value_arg);

  const std::string* save_file_path() const;
  void set_save_file_path(const std::string_view* value_arg);
  void set_save_file_path(std::string_view value_arg);

  const std::string* description() const;
  void set_description(const std::string_view* value_arg);
  void set_description(std::string_view value_arg);

  const std::string* mime_type() const;
  void set_mime_type(const std::string_view* value_arg);
  void set_mime_type(std::string_view value_arg);


 private:
  static SaveItemMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SaveToHostApi;
  friend class PigeonCodecSerializer;
  MediaType media_type_;
  std::optional<std::string> name_;
  std::string file_path_;
  std::string save_directory_path_;
  std::optional<std::string> save_file_path_;
  std::optional<std::string> description_;
  std::optional<std::string> mime_type_;

};


// Generated class from Pigeon that represents data sent in messages.
class SaveToResult {
 public:
  // Constructs an object setting all fields.
  explicit SaveToResult(
    bool success,
    const std::string& message);

  bool success() const;
  void set_success(bool value_arg);

  const std::string& message() const;
  void set_message(std::string_view value_arg);


 private:
  static SaveToResult FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class SaveToHostApi;
  friend class PigeonCodecSerializer;
  bool success_;
  std::string message_;

};

class PigeonCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonCodecSerializer();
  inline static PigeonCodecSerializer& GetInstance() {
    static PigeonCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class SaveToHostApi {
 public:
  SaveToHostApi(const SaveToHostApi&) = delete;
  SaveToHostApi& operator=(const SaveToHostApi&) = delete;
  virtual ~SaveToHostApi() {}
  virtual ErrorOr<SaveToResult> Save(const SaveItemMessage& save_item) = 0;

  // The codec used by SaveToHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `SaveToHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    SaveToHostApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    SaveToHostApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  SaveToHostApi() = default;

};
}  // namespace flutter_saveto
#endif  // PIGEON_MESSAGES_G_H_
