// Copyright 2024 EchoTech. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace flutter_saveto {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
    return FlutterError(
        "channel-error",
        "Unable to establish connection on channel: '" + channel_name + "'.",
        EncodableValue(""));
}

// SaveItemMessage

SaveItemMessage::SaveItemMessage(
  const MediaType& media_type,
  const std::string& file_path,
  const std::string& save_directory_path)
 : media_type_(media_type),
    file_path_(file_path),
    save_directory_path_(save_directory_path) {}

SaveItemMessage::SaveItemMessage(
  const MediaType& media_type,
  const std::string* name,
  const std::string& file_path,
  const std::string& save_directory_path,
  const std::string* save_file_path,
  const std::string* description,
  const std::string* mime_type)
 : media_type_(media_type),
    name_(name ? std::optional<std::string>(*name) : std::nullopt),
    file_path_(file_path),
    save_directory_path_(save_directory_path),
    save_file_path_(save_file_path ? std::optional<std::string>(*save_file_path) : std::nullopt),
    description_(description ? std::optional<std::string>(*description) : std::nullopt),
    mime_type_(mime_type ? std::optional<std::string>(*mime_type) : std::nullopt) {}

const MediaType& SaveItemMessage::media_type() const {
  return media_type_;
}

void SaveItemMessage::set_media_type(const MediaType& value_arg) {
  media_type_ = value_arg;
}


const std::string* SaveItemMessage::name() const {
  return name_ ? &(*name_) : nullptr;
}

void SaveItemMessage::set_name(const std::string_view* value_arg) {
  name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SaveItemMessage::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


const std::string& SaveItemMessage::file_path() const {
  return file_path_;
}

void SaveItemMessage::set_file_path(std::string_view value_arg) {
  file_path_ = value_arg;
}


const std::string& SaveItemMessage::save_directory_path() const {
  return save_directory_path_;
}

void SaveItemMessage::set_save_directory_path(std::string_view value_arg) {
  save_directory_path_ = value_arg;
}


const std::string* SaveItemMessage::save_file_path() const {
  return save_file_path_ ? &(*save_file_path_) : nullptr;
}

void SaveItemMessage::set_save_file_path(const std::string_view* value_arg) {
  save_file_path_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SaveItemMessage::set_save_file_path(std::string_view value_arg) {
  save_file_path_ = value_arg;
}


const std::string* SaveItemMessage::description() const {
  return description_ ? &(*description_) : nullptr;
}

void SaveItemMessage::set_description(const std::string_view* value_arg) {
  description_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SaveItemMessage::set_description(std::string_view value_arg) {
  description_ = value_arg;
}


const std::string* SaveItemMessage::mime_type() const {
  return mime_type_ ? &(*mime_type_) : nullptr;
}

void SaveItemMessage::set_mime_type(const std::string_view* value_arg) {
  mime_type_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SaveItemMessage::set_mime_type(std::string_view value_arg) {
  mime_type_ = value_arg;
}


EncodableList SaveItemMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(CustomEncodableValue(media_type_));
  list.push_back(name_ ? EncodableValue(*name_) : EncodableValue());
  list.push_back(EncodableValue(file_path_));
  list.push_back(EncodableValue(save_directory_path_));
  list.push_back(save_file_path_ ? EncodableValue(*save_file_path_) : EncodableValue());
  list.push_back(description_ ? EncodableValue(*description_) : EncodableValue());
  list.push_back(mime_type_ ? EncodableValue(*mime_type_) : EncodableValue());
  return list;
}

SaveItemMessage SaveItemMessage::FromEncodableList(const EncodableList& list) {
  SaveItemMessage decoded(
    std::any_cast<const MediaType&>(std::get<CustomEncodableValue>(list[0])),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]));
  auto& encodable_name = list[1];
  if (!encodable_name.IsNull()) {
    decoded.set_name(std::get<std::string>(encodable_name));
  }
  auto& encodable_save_file_path = list[4];
  if (!encodable_save_file_path.IsNull()) {
    decoded.set_save_file_path(std::get<std::string>(encodable_save_file_path));
  }
  auto& encodable_description = list[5];
  if (!encodable_description.IsNull()) {
    decoded.set_description(std::get<std::string>(encodable_description));
  }
  auto& encodable_mime_type = list[6];
  if (!encodable_mime_type.IsNull()) {
    decoded.set_mime_type(std::get<std::string>(encodable_mime_type));
  }
  return decoded;
}

// SaveToResult

SaveToResult::SaveToResult(
  bool success,
  const std::string& message)
 : success_(success),
    message_(message) {}

bool SaveToResult::success() const {
  return success_;
}

void SaveToResult::set_success(bool value_arg) {
  success_ = value_arg;
}


const std::string& SaveToResult::message() const {
  return message_;
}

void SaveToResult::set_message(std::string_view value_arg) {
  message_ = value_arg;
}


EncodableList SaveToResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(success_));
  list.push_back(EncodableValue(message_));
  return list;
}

SaveToResult SaveToResult::FromEncodableList(const EncodableList& list) {
  SaveToResult decoded(
    std::get<bool>(list[0]),
    std::get<std::string>(list[1]));
  return decoded;
}


PigeonCodecSerializer::PigeonCodecSerializer() {}

EncodableValue PigeonCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129:
      return CustomEncodableValue(SaveItemMessage::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(SaveToResult::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      {
        const auto& encodable_enum_arg = ReadValue(stream);
        const int64_t enum_arg_value = encodable_enum_arg.IsNull() ? 0 : encodable_enum_arg.LongValue();
        return encodable_enum_arg.IsNull() ? EncodableValue() : CustomEncodableValue(static_cast<MediaType>(enum_arg_value));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(SaveItemMessage)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<SaveItemMessage>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(SaveToResult)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<SaveToResult>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(MediaType)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(static_cast<int>(std::any_cast<MediaType>(*custom_value))), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by SaveToHostApi.
const flutter::StandardMessageCodec& SaveToHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonCodecSerializer::GetInstance());
}

// Sets up an instance of `SaveToHostApi` to handle messages through the `binary_messenger`.
void SaveToHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  SaveToHostApi* api) {
  SaveToHostApi::SetUp(binary_messenger, api, "");
}

void SaveToHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  SaveToHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.flutter_saveto.SaveToHostApi.save" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_save_item_arg = args.at(0);
          if (encodable_save_item_arg.IsNull()) {
            reply(WrapError("save_item_arg unexpectedly null."));
            return;
          }
          const auto& save_item_arg = std::any_cast<const SaveItemMessage&>(std::get<CustomEncodableValue>(encodable_save_item_arg));
          ErrorOr<SaveToResult> output = api->Save(save_item_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue SaveToHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue SaveToHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace flutter_saveto
