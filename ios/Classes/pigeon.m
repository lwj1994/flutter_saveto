// Copyright 2024 EchoTech. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation MediaTypeBox
- (instancetype)initWithValue:(MediaType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface SaveItemMessage ()
+ (SaveItemMessage *)fromList:(NSArray<id> *)list;
+ (nullable SaveItemMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface SaveToResult ()
+ (SaveToResult *)fromList:(NSArray<id> *)list;
+ (nullable SaveToResult *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation SaveItemMessage
+ (instancetype)makeWithMediaType:(MediaType)mediaType
    name:(nullable NSString *)name
    filePath:(NSString *)filePath
    saveDirectoryPath:(NSString *)saveDirectoryPath
    saveFilePath:(nullable NSString *)saveFilePath
    description:(nullable NSString *)description
    mimeType:(nullable NSString *)mimeType {
  SaveItemMessage* pigeonResult = [[SaveItemMessage alloc] init];
  pigeonResult.mediaType = mediaType;
  pigeonResult.name = name;
  pigeonResult.filePath = filePath;
  pigeonResult.saveDirectoryPath = saveDirectoryPath;
  pigeonResult.saveFilePath = saveFilePath;
  pigeonResult.description = description;
  pigeonResult.mimeType = mimeType;
  return pigeonResult;
}
+ (SaveItemMessage *)fromList:(NSArray<id> *)list {
  SaveItemMessage *pigeonResult = [[SaveItemMessage alloc] init];
  MediaTypeBox *enumBox = GetNullableObjectAtIndex(list, 0);
  pigeonResult.mediaType = enumBox.value;
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.filePath = GetNullableObjectAtIndex(list, 2);
  pigeonResult.saveDirectoryPath = GetNullableObjectAtIndex(list, 3);
  pigeonResult.saveFilePath = GetNullableObjectAtIndex(list, 4);
  pigeonResult.description = GetNullableObjectAtIndex(list, 5);
  pigeonResult.mimeType = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable SaveItemMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SaveItemMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[MediaTypeBox alloc] initWithValue:self.mediaType],
    self.name ?: [NSNull null],
    self.filePath ?: [NSNull null],
    self.saveDirectoryPath ?: [NSNull null],
    self.saveFilePath ?: [NSNull null],
    self.description ?: [NSNull null],
    self.mimeType ?: [NSNull null],
  ];
}
@end

@implementation SaveToResult
+ (instancetype)makeWithSuccess:(BOOL )success
    message:(NSString *)message {
  SaveToResult* pigeonResult = [[SaveToResult alloc] init];
  pigeonResult.success = success;
  pigeonResult.message = message;
  return pigeonResult;
}
+ (SaveToResult *)fromList:(NSArray<id> *)list {
  SaveToResult *pigeonResult = [[SaveToResult alloc] init];
  pigeonResult.success = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SaveToResult *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [SaveToResult fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.success),
    self.message ?: [NSNull null],
  ];
}
@end

@interface nullPigeonPigeonCodecReader : FlutterStandardReader
@end
@implementation nullPigeonPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [SaveItemMessage fromList:[self readValue]];
    case 130: 
      return [SaveToResult fromList:[self readValue]];
    case 131: 
      {
        NSNumber *enumAsNumber = [self readValue];
        return enumAsNumber == nil ? nil : [[MediaTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
      }
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullPigeonPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullPigeonPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SaveItemMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SaveToResult class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[MediaTypeBox class]]) {
    MediaTypeBox * box = (MediaTypeBox *)value;
    [self writeByte:131];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullPigeonPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullPigeonPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullPigeonPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullPigeonPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetPigeonCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullPigeonPigeonCodecReaderWriter *readerWriter = [[nullPigeonPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpSaveToHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SaveToHostApi> *api) {
  SetUpSaveToHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpSaveToHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SaveToHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.flutter_saveto.SaveToHostApi.save", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetPigeonCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveSaveItem:error:)], @"SaveToHostApi api (%@) doesn't respond to @selector(saveSaveItem:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        SaveItemMessage *arg_saveItem = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        SaveToResult *output = [api saveSaveItem:arg_saveItem error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
